<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title + ' - WhatsApp Bot Dashboard' : 'WhatsApp Bot Dashboard' %></title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    
    <!-- Alpine.js -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>

    <!-- Custom Styles -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        /* Dark mode scrollbar */
        .dark ::-webkit-scrollbar-track {
            background: #1f2937;
        }

        .dark ::-webkit-scrollbar-thumb {
            background: #4b5563;
        }

        .dark ::-webkit-scrollbar-thumb:hover {
            background: #6b7280;
        }

        /* Fade animations */
        .fade-enter {
            opacity: 0;
            transform: translateY(-10px);
        }

        .fade-enter-active {
            opacity: 1;
            transform: translateY(0);
            transition: opacity 300ms, transform 300ms;
        }

        .fade-exit {
            opacity: 1;
            transform: translateY(0);
        }

        .fade-exit-active {
            opacity: 0;
            transform: translateY(10px);
            transition: opacity 300ms, transform 300ms;
        }
    </style>

    <!-- Tailwind Config -->
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0fdf4',
                            100: '#dcfce7',
                            200: '#bbf7d0',
                            300: '#86efac',
                            400: '#4ade80',
                            500: '#22c55e',
                            600: '#16a34a',
                            700: '#15803d',
                            800: '#166534',
                            900: '#14532d'
                        }
                    },
                    animation: {
                        'spin-slow': 'spin 2s linear infinite',
                    }
                }
            }
        }
    </script>

    <!-- Notification System -->
    <div
        x-data="notificationSystem()"
        @notify.window="add($event.detail)"
        class="fixed top-4 right-4 z-50 space-y-4"
    >
        <template x-for="notification in notifications" :key="notification.id">
            <div
                x-show="notification.visible"
                x-transition:enter="transition ease-out duration-300"
                x-transition:enter-start="opacity-0 transform translate-x-8"
                x-transition:enter-end="opacity-100 transform translate-x-0"
                x-transition:leave="transition ease-in duration-200"
                x-transition:leave-start="opacity-100 transform translate-x-0"
                x-transition:leave-end="opacity-0 transform translate-x-8"
                :class="{
                    'bg-green-50 text-green-800 dark:bg-green-900 dark:text-green-300': notification.type === 'success',
                    'bg-red-50 text-red-800 dark:bg-red-900 dark:text-red-300': notification.type === 'error',
                    'bg-blue-50 text-blue-800 dark:bg-blue-900 dark:text-blue-300': notification.type === 'info',
                    'bg-yellow-50 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300': notification.type === 'warning'
                }"
                class="rounded-lg p-4 shadow-lg max-w-sm w-full"
            >
                <div class="flex items-start">
                    <div class="flex-shrink-0">
                        <i class="fas" :class="{
                            'fa-check-circle text-green-400': notification.type === 'success',
                            'fa-times-circle text-red-400': notification.type === 'error',
                            'fa-info-circle text-blue-400': notification.type === 'info',
                            'fa-exclamation-circle text-yellow-400': notification.type === 'warning'
                        }"></i>
                    </div>
                    <div class="ml-3 w-0 flex-1">
                        <p class="text-sm font-medium" x-text="notification.message"></p>
                    </div>
                    <div class="ml-4 flex-shrink-0 flex">
                        <button
                            @click="remove(notification.id)"
                            class="inline-flex text-gray-400 hover:text-gray-500 focus:outline-none"
                        >
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
        </template>
    </div>

    <!-- Notification System Script -->
    <script>
        function notificationSystem() {
            return {
                notifications: [],
                add(notification) {
                    const id = Date.now();
                    this.notifications.push({
                        id,
                        type: notification.type || 'info',
                        message: notification.message,
                        visible: true
                    });

                    // Auto remove after 5 seconds
                    setTimeout(() => this.remove(id), 5000);
                },
                remove(id) {
                    const index = this.notifications.findIndex(n => n.id === id);
                    if (index > -1) {
                        this.notifications[index].visible = false;
                        setTimeout(() => {
                            this.notifications = this.notifications.filter(n => n.id !== id);
                        }, 300);
                    }
                }
            };
        }
    </script>

    <!-- Loading Overlay -->
    <div
        x-data="{ loading: false }"
        @loading.window="loading = $event.detail"
        x-show="loading"
        class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
    >
        <div class="bg-white dark:bg-gray-800 rounded-lg p-8 max-w-sm w-full mx-4 text-center">
            <div class="animate-spin-slow inline-block w-16 h-16">
                <i class="fas fa-circle-notch text-4xl text-green-500"></i>
            </div>
            <p class="mt-4 text-gray-600 dark:text-gray-400">Loading...</p>
        </div>
    </div>

    <!-- Page-specific head content -->
    <% if (typeof head !== 'undefined') { %>
        <%- head %>
    <% } %>
</head>
<body>
    <!-- Page content -->
    <%- body %>

    <!-- Page-specific scripts -->
    <% if (typeof scripts !== 'undefined') { %>
        <%- scripts %>
    <% } %>
</body>
</html>
