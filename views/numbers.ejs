<%- include('layout', { title: 'Numbers Management' }) %>

<div class="container mx-auto" x-data="numbersManagement()">
    <!-- Header -->
    <div class="mb-8 flex justify-between items-center">
        <div>
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">WhatsApp Numbers</h1>
            <p class="text-gray-600 dark:text-gray-400">Manage your connected WhatsApp numbers</p>
        </div>
        <div class="flex space-x-4">
            <!-- Add New Number Button -->
            <button 
                @click="showConnectionModal = true"
                class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
            >
                <i class="fas fa-plus mr-2"></i>
                Add Number
            </button>
            
            <!-- Bulk Actions (Admin Only) -->
            <template x-if="selectedNumbers.length > 0">
                <div class="relative" @click.away="showBulkActions = false">
                    <button 
                        @click="showBulkActions = !showBulkActions"
                        class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600 dark:hover:bg-gray-600"
                    >
                        Bulk Actions
                        <i class="fas fa-chevron-down ml-2"></i>
                    </button>
                    
                    <!-- Bulk Actions Dropdown -->
                    <div 
                        x-show="showBulkActions"
                        class="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 divide-y divide-gray-100 dark:divide-gray-700"
                    >
                        <div class="py-1">
                            <button
                                @click="bulkDisconnect()"
                                class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700"
                            >
                                Disconnect Selected
                            </button>
                            <button
                                @click="bulkRemove()"
                                class="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100 dark:text-red-400 dark:hover:bg-gray-700"
                            >
                                Remove Selected
                            </button>
                        </div>
                    </div>
                </div>
            </template>
        </div>
    </div>

    <!-- Numbers List -->
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-900">
                    <tr>
                        <th class="px-6 py-3 text-left">
                            <input 
                                type="checkbox" 
                                class="rounded border-gray-300 text-green-600 shadow-sm focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50"
                                @click="toggleAllNumbers"
                                :checked="selectedNumbers.length === numbers.length"
                            >
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Number</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Connected Since</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    <template x-for="number in numbers" :key="number.id">
                        <tr>
                            <td class="px-6 py-4">
                                <input 
                                    type="checkbox" 
                                    class="rounded border-gray-300 text-green-600 shadow-sm focus:border-green-300 focus:ring focus:ring-green-200 focus:ring-opacity-50"
                                    :checked="selectedNumbers.includes(number.id)"
                                    @click="toggleNumber(number.id)"
                                >
                            </td>
                            <td class="px-6 py-4">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 h-10 w-10">
                                        <img 
                                            class="h-10 w-10 rounded-full" 
                                            :src="number.avatar || 'https://ui-avatars.com/api/?name=' + number.name" 
                                            :alt="number.name"
                                        >
                                    </div>
                                    <div class="ml-4">
                                        <div 
                                            class="text-sm font-medium text-gray-900 dark:text-white cursor-pointer"
                                            @click="startRename(number)"
                                            x-text="number.name"
                                        ></div>
                                        <div class="text-sm text-gray-500 dark:text-gray-400" x-text="number.id"></div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4">
                                <span 
                                    class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full"
                                    :class="{
                                        'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200': number.status === 'connected',
                                        'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200': number.status === 'disconnected',
                                        'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200': number.status === 'connecting'
                                    }"
                                    x-text="number.status"
                                ></span>
                            </td>
                            <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-400" x-text="formatDate(number.connectedAt)"></td>
                            <td class="px-6 py-4">
                                <div class="flex space-x-3">
                                    <button 
                                        @click="disconnectNumber(number.id)"
                                        class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
                                        :disabled="number.status === 'disconnected'"
                                    >
                                        <i class="fas fa-power-off"></i>
                                    </button>
                                    <button 
                                        @click="removeNumber(number.id)"
                                        class="text-red-400 hover:text-red-500"
                                    >
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Connection Modal -->
    <div 
        x-show="showConnectionModal" 
        class="fixed inset-0 z-50 overflow-y-auto"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
    >
        <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div 
                class="fixed inset-0 transition-opacity" 
                aria-hidden="true"
                @click="showConnectionModal = false"
            >
                <div class="absolute inset-0 bg-gray-500 dark:bg-gray-900 opacity-75"></div>
            </div>

            <div 
                class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
                @click.away="showConnectionModal = false"
            >
                <!-- Modal Header -->
                <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <h3 class="text-lg font-medium text-gray-900 dark:text-white">Add New WhatsApp Number</h3>
                </div>

                <!-- Modal Content -->
                <div class="px-6 py-4">
                    <!-- Connection Type Tabs -->
                    <div class="border-b border-gray-200 dark:border-gray-700">
                        <nav class="-mb-px flex space-x-8">
                            <button
                                @click="connectionType = 'qr'"
                                class="py-4 px-1 border-b-2 font-medium text-sm"
                                :class="connectionType === 'qr' ? 'border-green-500 text-green-600 dark:text-green-400' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'"
                            >
                                <i class="fas fa-qrcode mr-2"></i>
                                QR Code
                            </button>
                            <button
                                @click="connectionType = 'phone'"
                                class="py-4 px-1 border-b-2 font-medium text-sm"
                                :class="connectionType === 'phone' ? 'border-green-500 text-green-600 dark:text-green-400' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'"
                            >
                                <i class="fas fa-phone mr-2"></i>
                                Phone Number
                            </button>
                        </nav>
                    </div>

                    <!-- QR Code Connection -->
                    <div x-show="connectionType === 'qr'" class="mt-4">
                        <template x-if="!qrCode">
                            <div class="text-center py-8">
                                <button
                                    @click="generateQR"
                                    class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                                    :disabled="generating"
                                >
                                    <template x-if="!generating">
                                        <span>Generate QR Code</span>
                                    </template>
                                    <template x-if="generating">
                                        <span>Generating...</span>
                                    </template>
                                </button>
                            </div>
                        </template>
                        <template x-if="qrCode">
                            <div class="text-center py-4">
                                <img :src="qrCode" alt="WhatsApp QR Code" class="mx-auto">
                                <p class="mt-4 text-sm text-gray-600 dark:text-gray-400">
                                    Scan this QR code with WhatsApp on your phone
                                </p>
                            </div>
                        </template>
                    </div>

                    <!-- Phone Number Connection -->
                    <div x-show="connectionType === 'phone'" class="mt-4">
                        <form @submit.prevent="connectWithPhone">
                            <div class="mb-4">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                    Phone Number
                                </label>
                                <div class="mt-1 relative rounded-md shadow-sm">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <i class="fas fa-phone text-gray-400"></i>
                                    </div>
                                    <input
                                        type="tel"
                                        x-model="phoneNumber"
                                        class="focus:ring-green-500 focus:border-green-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                        placeholder="+1234567890"
                                        required
                                    >
                                </div>
                                <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                                    Enter the phone number in international format
                                </p>
                            </div>
                            <div class="mt-6">
                                <button
                                    type="submit"
                                    class="w-full inline-flex justify-center items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                                    :disabled="connecting"
                                >
                                    <template x-if="!connecting">
                                        <span>Connect</span>
                                    </template>
                                    <template x-if="connecting">
                                        <span>Connecting...</span>
                                    </template>
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Rename Modal -->
    <div 
        x-show="showRenameModal" 
        class="fixed inset-0 z-50 overflow-y-auto"
        x-transition:enter="transition ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="transition ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
    >
        <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <div 
                class="fixed inset-0 transition-opacity" 
                aria-hidden="true"
                @click="showRenameModal = false"
            >
                <div class="absolute inset-0 bg-gray-500 dark:bg-gray-900 opacity-75"></div>
            </div>

            <div 
                class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
                @click.away="showRenameModal = false"
            >
                <form @submit.prevent="renameNumber">
                    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                        <h3 class="text-lg font-medium text-gray-900 dark:text-white">Rename Number</h3>
                    </div>
                    <div class="px-6 py-4">
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                New Name
                            </label>
                            <input
                                type="text"
                                x-model="newName"
                                class="mt-1 focus:ring-green-500 focus:border-green-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                required
                            >
                        </div>
                    </div>
                    <div class="px-6 py-4 bg-gray-50 dark:bg-gray-700 text-right">
                        <button
                            type="button"
                            class="mr-3 inline-flex justify-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 dark:bg-gray-600 dark:text-gray-300 dark:border-gray-500 dark:hover:bg-gray-500"
                            @click="showRenameModal = false"
                        >
                            Cancel
                        </button>
                        <button
                            type="submit"
                            class="inline-flex justify-center px-4 py-2 text-sm font-medium text-white bg-green-600 border border-transparent rounded-md shadow-sm hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                        >
                            Save
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
function numbersManagement() {
    return {
        numbers: [],
        selectedNumbers: [],
        showConnectionModal: false,
        showRenameModal: false,
        showBulkActions: false,
        connectionType: 'qr',
        qrCode: null,
        phoneNumber: '',
        generating: false,
        connecting: false,
        currentNumber: null,
        newName: '',
        qrCheckInterval: null,

        async init() {
            await this.loadNumbers();
            this.startStatusUpdates();
        },

        async loadNumbers() {
            try {
                const response = await fetch('/api/numbers');
                const { data } = await response.json();
                this.numbers = data;
            } catch (error) {
                console.error('Error loading numbers:', error);
            }
        },

        startStatusUpdates() {
            setInterval(async () => {
                await this.loadNumbers();
            }, 10000);
        },

        async generateQR() {
            this.generating = true;
            try {
                const response = await fetch('/api/numbers/connect/qr', {
                    method: 'POST'
                });
                const { data } = await response.json();
                this.qrCode = data.qrCode;
                
                // Start checking QR status
                this.startQRCheck(data.sessionId);
            } catch (error) {
                console.error('Error generating QR:', error);
            } finally {
                this.generating = false;
            }
        },

        startQRCheck(sessionId) {
            this.qrCheckInterval = setInterval(async () => {
                try {
                    const response = await fetch(`/api/numbers/qr-status/${sessionId}`);
                    const { data } = await response.json();
                    
                    if (data.status === 'connected') {
                        clearInterval(this.qrCheckInterval);
                        this.showConnectionModal = false;
                        this.qrCode = null;
                        await this.loadNumbers();
                    }
                } catch (error) {
                    console.error('Error checking QR status:', error);
                }
            }, 2000);
        },

        async connectWithPhone() {
            this.connecting = true;
            try {
                const response = await fetch('/api/numbers/connect/phone', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        phoneNumber: this.phoneNumber
                    })
                });
                
                const data = await response.json();
                if (data.success) {
                    this.showConnectionModal = false;
                    this.phoneNumber = '';
                    await this.loadNumbers();
                }
            } catch (error) {
                console.error('Error connecting with phone:', error);
            } finally {
                this.connecting = false;
            }
        },

        async disconnectNumber(id) {
            try {
                await fetch(`/api/numbers/disconnect/${id}`, {
                    method: 'POST'
                });
                await this.loadNumbers();
            } catch (error) {
                console.error('Error disconnecting number:', error);
            }
        },

        async removeNumber(id) {
            if (!confirm('Are you sure you want to remove this number?')) return;
            
            try {
                await fetch(`/api/numbers/remove/${id}`, {
                    method: 'DELETE'
                });
                await this.loadNumbers();
            } catch (error) {
                console.error('Error removing number:', error);
            }
        },

        startRename(number) {
            this.currentNumber = number;
            this.newName = number.name;
            this.showRenameModal = true;
        },

        async renameNumber() {
            try {
                await fetch('/api/numbers/rename', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        id: this.currentNumber.id,
                        name: this.newName
                    })
                });
                
                this.showRenameModal = false;
                await this.loadNumbers();
            } catch (error) {
                console.error('Error renaming number:', error);
            }
        },

        toggleNumber(id) {
            const index = this.selectedNumbers.indexOf(id);
            if (index === -1) {
                this.selectedNumbers.push(id);
            } else {
                this.selectedNumbers.splice(index, 1);
            }
        },

        toggleAllNumbers() {
            if (this.selectedNumbers.length === this.numbers.length) {
                this.selectedNumbers = [];
            } else {
                this.selectedNumbers = this.numbers.map(n => n.id);
            }
        },

        async bulkDisconnect() {
            if (!confirm('Are you sure you want to disconnect all selected numbers?')) return;
            
            try {
                await fetch('/api/numbers/bulk', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        action: 'disconnect',
                        ids: this.selectedNumbers
                    })
                });
                
                this.selectedNumbers = [];
                this.showBulkActions = false;
                await this.loadNumbers();
            } catch (error) {
                console.error('Error performing bulk disconnect:', error);
            }
        },

        async bulkRemove() {
            if (!confirm('Are you sure you want to remove all selected numbers?')) return;
            
            try {
                await fetch('/api/numbers/bulk', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        action: 'remove',
                        ids: this.selectedNumbers
                    })
                });
                
                this.selectedNumbers = [];
                this.showBulkActions = false;
                await this.loadNumbers();
            } catch (error) {
                console.error('Error performing bulk remove:', error);
            }
        },

        formatDate(date) {
            return new Date(date).toLocaleString();
        }
    }
}
</script>
